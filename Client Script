api.controller=function(spUtil,$scope,$timeout) {
	/* widget controller */
	var c = this;

	/* Step 3. Accept user input */
	c.selectAg = function(record) {

		//Set a property on the data object to identify the selected object
		c.data.selectedAg = record.agValue;

		//Send the data object to the server script
		c.server.update();
	}	

	//Sort Functionality
	c.sortOrder = false;
	c.changeSortCol = function(key){

		/* If the user is selecting the same column, reverse the sort order, else set the order to false which forces a new sort in ascending order */
		if(key  ==  c.orderCol)
			c.sortOrder = !c.sortOrder;
		else
			c.sortOrder = false;

		c.orderCol = key;
	}	

	//Record Watch Functionality
	//a flag to indicate if a live update has been triggered by the Record Watcher
	c.updatedFromServer = false;

	/* empty string is a filter. For example 'active=true' would only trigger
	the callback function when changes are made to active records */
	spUtil.recordWatch($scope, c.data.table, '', function(updateObj){
		spUtil.update($scope);
		c.updatedFromServer = true;
		if (!c.updatedRegs) {
			c.updatedRegs = {};
		}

		/* add sys_ids of any changed records to an array
		this will allow us to highlight them in the HTML template */
		c.updatedRegs[updateObj.data.sys_id] = true;
		$timeout(function(){
			c.updatedRegs[updateObj.data.sys_id] = false;
		},6000);
	});	


};	
